:-dynamic(punto/2).

% Guardar punto en memoria.
guardar_punto(X,Y):- assert(punto(X,Y)).

% Eliminar punto de memoria.
eliminar_punto(X,Y):- retract(punto(X,Y)).

% Eliminar todos los puntos de memoria.
eliminar_todo:- retractall(punto(_,_)).

% Eliminar último de la lista.
eliminarultimo(L,L1):- reverse(L,[_|T]),reverse(T,L1).

% Función auxiliar.
g(X,Y, Agregados,[[X2,Y]|R], N):-
	X2 is X+1,
	punto(X2,Y),
	L=[X2,Y],
	not(member(L, Agregados)),
	g(X2, Y, [L|Agregados],R, N2),
	N is N2+1.
g(X,Y, Agregados, [[X2,Y]|R], N):-
	X2 is X-1,
	punto(X2,Y),
	L=[X2,Y],
	not(member(L, Agregados)),
	g(X2, Y, [L|Agregados],R, N2),
	N is N2+1.

g(X,Y, Agregados,[[X,Y2]|R], N):-
	Y2 is Y+1,
	punto(X,Y2),
	L=[X,Y2],
	not(member(L, Agregados)),
	g(X, Y2, [L|Agregados], R, N2),
	N is N2+1.

g(X,Y, Agregados,[[X,Y2]|R], N):-
	Y2 is Y-1,
	punto(X,Y2),
	L=[X,Y2],
	not(member(L, Agregados)),
	g(X, Y2, [L|Agregados],R, N2),
	N is N2+1.

g(_,_,_,[],0).

aplanar([],[_],[]).
aplanar([H1|T1],R,S):-
	aplanar(T1,R,S2),
	append(H1,S2,S3),
	S = S3.

%%%%%%%%%%%%%%%%%% Consultas %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Calcular el tamaño del grupo al que corresponde una casilla.
%
grupo_punto(X,Y,R,N):-
	findall(L,g(X,Y,[],L,_),R2),
	aplanar(R2,_,R3),
	sort(R3,R),
	length(R,N).

todoAux(_, _,[],[_],[]).
todoAux(X,Y,[[H1|[T1|_]]|T2],[R2|S3],S):-
	grupo_punto(X,Y,R2,_),
	todoAux(H1,T1,T2,S3,_),!,
	S=S3,!.



% Calcular el número de grupos distintos y sus tamaños para toda la
% cuadrícula.
%
todos_grupos(S):-
	 findall([X,Y],punto(X,Y),[[H1|[T1|_]]|T2]),
	 todoAux(H1,T1,T2,_,S2),
	 eliminarultimo(S2,S4),
	 sort(S4,S3),
	 S = S3,!.
